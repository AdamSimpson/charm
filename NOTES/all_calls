

HOST_MAIN CALLS:

main(argc, argv)
int argc;
char *argv[];
{
}

Loop(peNum)
PeNumType peNum;
{
}


BroadcastReadBuffer(ReadBuffer, size)
void *ReadBuffer;
int size;
{
}



NODE_MAIN CALLS:


main()
{
}

NodeBocInitLoop(peNum)
PeNumType peNum;
{
}



Loop(peNum)
PeNumType peNum;
{
}


NodeBocInit()
{
}

NodeAddSysEps(NodeEpTbl)
FUNCTION_PTR NodeEpTbl[];
{
}

NodeAddSysBocEps(NodeBocEpTbl)
FUNCTION_PTR NodeBocEpTbl[];
{
}


COMMON_CK CALLS:

void * CreateChareBlock(sizeData)
int sizeData;
{ 
}


CkError(va_alist)
va_dcl
{
}


CkPrintf(va_alist)
va_dcl
{
}


CkDebugPrint(va_alist)
va_dcl
{
}


PrintMsgHead(env)
ENVELOPE * env;
{
}



CreateChareAtPE(Entry, Msg, MsgSize, size, PeNum)
int Entry;
void * Msg;
int MsgSize;
int size; /* size of the data area */
int PeNum;
{ 
}

int ChareIdPe(pChareId)
ChareIDType * pChareId;
{
}

PrintChareID(pChareId)
ChareIDType * pChareId;
{
}


/* user interface functions: */

SendMsg(Entry, Msg, size, pChareID)
int Entry;
void * Msg;
int size;
ChareIDType * pChareID;
{
}


MyChareID(pChareID)
ChareIDType * pChareID;
{
}


HOST_CK CALLS:


HostPumpMsgs()
{
}



HostAddSysEps(HostEpTbl)
FUNCTION_PTR HostEpTbl[];
{
}

HostAddSysBocEps(HostBocEpTbl)
FUNCTION_PTR HostBocEpTbl[];
{
}


CkHostExit()
{
}



NODE_CK CALLS:


int CkMyPeNum()
{
}


NodePumpMsgs()
{
}



SendToBranch()
{
}

CkExit()
{
}

ChareExit()
{
}


COMMON_BOC CALLS:

BOC_BLOCK * CreateBocBlock(sizeData)
int sizeData;
{
}

SendMsgBranch(Entry, Msg, size, bocNum, destPE)
EntryPointType Entry;
void * Msg;
int size;
ChareNumType bocNum;
PeNumType destPE;
{
}


SendMsgManager(Entry, Msg, size, bocNum)
EntryPointType Entry;
void * Msg;
int size;
ChareNumType bocNum;
{
}




HOST_BOC CALLS:

SysBocInit()
{
}


CreateBoc(SizeData, pBocNum)
int SizeData;
ChareNumType *pBocNum;
{
}


CreateBranch(Entry, Msg, msgSize, dataSize)
int Entry;
void *Msg;
INT16 msgSize;
INT16 dataSize;
{
}



BroadcastCount(count)
int count;
{
}


void * GetHostBocDataPtr(bocNum)
ChareNumType bocNum;
{
}


BroadcastMsgBranch(Entry, Msg, size, bocNum)
EntryPointType Entry;
void * Msg;
int size;
ChareNumType bocNum;
{
}



NODE_BOC CALLS:

void * GetNodeBocDataPtr(bocNum)
ChareNumType bocNum;
{
}



QUEUE_STRATEGY CALLS:

int PrioritySize(priority)
int * priority;
{
}


QsInit()
{
}


QsEmpty()
{
}


QsPickNextMsg(Penvelope, PusrMsg,  Pprio)
ENVELOPE ** Penvelope;
char ** PusrMsg;
char ** Pprio;
{
}


QsDeQueueResponse(Penvelope, PusrMsg, Pprio)
ENVELOPE ** Penvelope;
char ** PusrMsg;
char ** Pprio;
{
}


QsDeQueueChare(Penvelope, PusrMsg, Pprio)
ENVELOPE ** Penvelope;
char ** PusrMsg;
char ** Pprio;
{
}


QsEnqMsg(envelope)
ENVELOPE * envelope;
{
}


QsEnQueueResponse(envelope)
ENVELOPE *envelope;
{
}


QsEnQueueChare(envelope)
ENVELOPE *envelope;
{
}



MEMORY ALLOCATION CALLS:

CkMemInit()
{
}


int TotalMsgSize(msgptr)
int *msgptr;
{
}


void *CkAllocMsg(request)
int request;
{
}


void *CkAllocPrioMsg(usrsize, priosize)
int usrsize, priosize;
{
}



void *CkAlloc(request)
int request;
{   
}



CkFreeMsg(ptr)
char *ptr;
{
}


CkFree(ptr)
int *ptr;
{
}



CkMemUsage()
{
}



int *CkPriorityBase(usrptr)
int *usrptr;
{
}



MACHINE CALLS BEGIN HERE:


MACHINE_COMMON CALLS:

int McMaxPeNum()
{
}



ArrivedMsgLength()
{
}



MACHINE_HOST CALLS:


McParamInit()
{
}

McHostInit(argc, argv)
int argc;
char *argv[];
{
}

long McMyPeNum()
{
}

McStartProcesses(fileName)
char fileName[];
{
}


int McHostProbe()
{
}


McHostBroadcast(size, msg)
int size;
char * msg;
{
}


McHostSyncSend(destPE, size, msg)
int destPE;
int size;
char * msg;
{
}



McHostSyncReceive(size, buffer)
int size;
char *buffer;
{
}

int McHostPeNum()
{
}



MACHINE_NODE CALLS:


McTimer()
{
}


McNodeInit()
{
}

long McMyPeNum()
{
}


int McNodeProbe()
{
}


McNodeSyncSend(destPE, size, msg)
int destPE;
int size;
char * msg;
{
}


McNodeSyncReceive(size, buffer)
int size;
char *buffer;
{
}


int McHostPeNum()
{
}


long McNumNeighbours()
{
}



MACHINE_SPANTREE CALLS:

McSpanTreeInit()
{
}


int McSpanTreeRoot()
{
}


int McSpanTreeParent(node)
int node;
{
}


McSpanTreeChild(node, children)
int node, *children;
{
}


int McNumSpanTreeChildren(node)
int node;
{
}


McSendToSpanTreeLeaves(size, msg)
int size;
char * msg;
{
}

McGetNodeNeighbours(node, neighbours)
INT16 node, *neighbours;
{
}



PrintSpanTree()
{
}



