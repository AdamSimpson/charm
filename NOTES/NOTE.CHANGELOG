Note: charm libraries (eg, reduction library) not currently dealt with
in makefiles.  Need to be included.

Note: Created new directory structure for converse.  Very similar to
old structure for charm, but greatly simplified.  See new
SUPER_INSTALL script for description.

Note: Disentangled the CMI and the CSD.  Now the LocalQueue is
a part of the Cmi, not part of the scheduler.  Also, the machine layer
isn't shoving stuff into the main sheduler queue anymore.

Note: each version must include the following files: machine.c, machine.h,
spantree.c, and converse.mk.  Converse.mk must define the symbols CMK_CC,
CMK_CXX, etc (see net-sol version for complete list), and must include
make-rules for cmk_extras and cmk_clean.

Note: changed name of charmhost to "conv-host", for lack of a better name.

Note: tested linkage of NET-SOL version of converse, no unresolved
externals.  Similarly with charm.

Note: all "unported" source moved into a separate directory.  This includes
most of the queueing strategies and most of the versions.  I am currenly
trying to get just one version and just one queueing strategy working,
and I'll do the others later.

Note: all references to Mc or Ck removed from net-* version of
converse.  Charm also updated, although Ck not removed from charm.

Note: Memory allocator moved into machine.c, as CmiAlloc, CmiSize,
and CmiFree.  Currently, this has only been done for network version.
It is currently a trivial implementation based on malloc and free.
CmiAlloc now never returns zero.  (We can add a variant function that
returns zero, if desired).  Not sure how this interacts with Charm yet,
and in particular, TotalMsgSize.  (I dumbly replaced TotalMsgSize with
CmiSize, but who knows what that will do).

Note: Argument parsing has been simplified.  CmiInit, CmiInitMc,
CsdInit, and ConverseInit each takes a single argument (argv), and
each removes a subset of the arguments from that vector.  pparam is
gone entirely.  Charm will need to be updated.

Note: machine.c no longer exports CmiGetMsg.  Instead, it
exports CmiGetNonLocal (a function) and CmiLocalQueue (a FIFO queue).

Note: machine.c no longer exports CmiInit.  Instead, it
exports CmiInitMc.

Warning: ConverseInit must not do anything critical, since user may
not call ConverseInit.  (In fact, must be moved to separate file to
avoid having the linker drag everything in).  Distribute functionality
of ConverseInit among CsdInit, CmiInit, etc.

Note: FIFO queues are currently part of converse (eg, FIFO_enqueue, etc).

Error: converse.h file should contain declarations for all functions
defined in converse.c, it does not.

Error: comm-handle semantics definitely not implemented correctly.

Error: CmiGrabBuffer definitely not correct.

Error: qs.newfifo.c, qs.ififo.c, etc, refer to "ENVELOPE"

Note: Changed the typedef "CommHandle" to CmiCommHandle.

Note: Modifying the queueing strategy modules in the following manner:
    1. Renamed all QS modules so each has a different name.
    2. For some strategies, collapsed the .c and the .h file together.
       Not done with all strategies.

Question: Didn't we decide to change the interface of the QS module
to CqsEnqueueFifo(msg, prioptr, priolen) or something like that?  If
we postpone this alteration, changes will be harder later.

-------------------------------------------------------------------------------
The following stuff cut from network version "machine.h", don't know
what it does or is supposed to do:

#define _CK_VARSIZE_UNIT 8

typedef char            BYTE;
typedef unsigned char   BOOLEAN;

#define ALL_NODES           (-1)
#define ALL_NODES_EXCEPT_ME (-2)

#define PROCESS_PID 1

#define MAXUSERARGS  20  /* these are used to pass comm line args not used */

# define SCANFBUFFER	8192
# define PRINTFBUFFER	8192
# define SCANFMSGLENGTH	1024
# define SCANFNVAR	16
# define MAX_PRINTFORMATS 128
# define STATIC
# define WORDSIZE	sizeof(int)

/* Types of lowest-level messages. */
# define CMI_TYPE		1	/* Chare Kernel message. */
 
#define McSyncReceive(msgsize,msg) (netRecv(msgsize,msg,CMI_TYPE))

#define McAllAsyncMsgsSent() TRUE

#define McReleaseSentMessages()

extern int _MC_InsideMachine ;

#define CkAsyncSend(destPE, size, env)   {\
	CmiAsyncSend(destPE, size, env); \
	CkFree(env); }

-------------------------------------------------------------------------------
