/* THIS FILE CONTAINS ALL THE ROUTINES PROVIDED BY THE CHARE KERNEL FOR 
   A HOST PROCESS ON A DISTRIBUTED MEMORY MACHINE */


extern int McMaxPeNum();
	/* to avoid ambiguity: returns the largest PeNum among the NODE pes.
	   i.e. don't count the host for shared memory machines */

extern ArrivedHostMsgLength();
	/* gives the length of the next message arrived at the host */

extern McParamInit();
	/* for initializing any machine dependent parameters */

extern McHostInit();
	/* invokes initialization routines at host */

extern long McMyPeNum();
	/* PeNums must vary between 0..X (with a FEW unused numbers allowed. 
	   e.g. 0. But don't use the arpa-net ID etc. as processor ID. Just a 
	   serial number. You may have to set the serial number up during 
	   INIT in a global variable in this file. */

extern McStartProcesses();
    /* start a process on each node with the executable sitting in the file: 
       called fileName. */

extern int McHostProbe();
	/* Return 0 if there is no message waiting to be "received". 
	   1 otherwise */

extern McHostBroadcast();
	/* broadcast information from the host to all nodes */

extern McHostSyncSend();
	/* send the message of "size" bytes to the destPE. 
	   Return only after the message has been sent, i.e.,
	   the buffer (msg) is free for re-use. */

extern McHostSyncReceive();
	/* Receive message into "buffer" of size "size" specified by user */

extern int McHostPeNum();
	/* returns the PeNum of the host processor */


