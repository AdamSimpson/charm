#!/bin/csh -f
############################################################################
# RCS INFORMATION:
#
#       $RCSfile$
#       $Author$      $Locker$              $State$
#       $Revision$        $Date$
#
############################################################################
# DESCRIPTION:
#
############################################################################
# REVISION HISTORY:
#
############################################################################



##############################################################################
#
# Initialize the main controlling variables, then setup error handler
#
##############################################################################

set OPTS_CC=()
set OPTS_CPLUS=()
set OPTS_LD=()
set OPTS_CPP=()
set FILES=()
set OBJECTFILES=()
set LIBRARIES=()
set DELETE=()
set COPIES=()
set MAINOBJ=()
unset OBJECT
unset SEQUENTIAL
unset VERBOSE
onintr failure

##############################################################################
#
# Parse the arguments
#
# Don't do any analysis in here, just the parsing.
#
##############################################################################


set argindex=1
while ($argindex <= $#argv)
    set arg=$argv[$argindex]
    @ argindex = $argindex + 1

    switch ($arg)
        case "-machine"
            set MACHTYPE=$argv[$argindex]
            @ argindex = $argindex + 1
            breaksw

        case "-seq"
	    set SEQUENTIAL=yes
            breaksw

        case "-language"
            set LANGUAGE=$argv[$argindex]
            @ argindex = $argindex + 1
            breaksw

	case "-balance"
            set BALANCE=$argv[$argindex]
            @ argindex = $argindex + 1
            breaksw

        case "-queue"
            set QUEUE=$argv[$argindex]
            @ argindex = $argindex + 1
            breaksw

        case "-memory"
            echo "Warning: -memory currently not being dealt with."
            @ argindex = $argindex + 1
            breaksw

	case "-execmode"
            set EXECMODE=$argv[$argindex]
            @ argindex = $argindex + 1
            breaksw

        case "-verbose"
            set VERBOSE=yes
            breaksw

        case "-save"
            set SAVE=1
            breaksw

        case "-cc"
            set OVERRIDE_CC=( $argv[$argindex] )
            @ argindex = $argindex + 1
            breaksw

        case "-c++"
            set OVERRIDE_CPLUS=( $argv[$argindex] )
            @ argindex = $argindex + 1
            breaksw

        case "-ld"
            set OVERRIDE_LD=( $argv[$argindex] )
            @ argindex = $argindex + 1
            breaksw

        case "-cc-option"
            set OPTS_CC=( $OPTS_CC $argv[$argindex] )
            @ argindex = $argindex + 1
            breaksw

        case "-c++-option"
            set OPTS_CPLUS=( $OPTS_CPLUS $argv[$argindex] )
            @ argindex = $argindex + 1
            breaksw

        case "-ld-option"
            set OPTS_LD=( $OPTS_LD $argv[$argindex] )
            @ argindex = $argindex + 1
            breaksw

        case "-c":
            # This is ignored.
            breaksw

	case "-o":
            set OBJECT=$argv[$argindex]
            @ argindex = $argindex + 1
            breaksw

	case "-cp"
	    set COPIES=($argv[$argindex] $COPIES)
	    @ argindex = $argindex + 1
            breaksw

        case "-D*"
            set OPTS_CPP=( $OPTS_CPP "$arg" )
            set OPTS_CC=( $OPTS_CC "$arg" )
            set OPTS_CPLUS=( $OPTS_CPLUS "$arg" )
            breaksw

        case "-I*"
            set OPTS_CPP=( $OPTS_CPP "$arg" )
            set OPTS_CC=( $OPTS_CC "$arg" )
            set OPTS_CPLUS=( $OPTS_CPLUS "$arg" )
            breaksw

        case "-L*"
            set OPTS_CC=( $OPTS_CC "$arg" )
            set OPTS_CPLUS=( $OPTS_CPLUS "$arg" )
            set OPTS_LD=( $OPTS_LD "$arg" )
            breaksw

        case "-g"
            set OPTS_CC=( $OPTS_CC $arg )
            set OPTS_CPLUS=( $OPTS_CPLUS $arg )
            set OPTS_LD=( $OPTS_LD $arg )
            breaksw

        case "-O*"
            set OPTS_CC=( $OPTS_CC $arg )
            set OPTS_CPLUS=( $OPTS_CPLUS $arg )
            breaksw

        case "-l*"
            set LIBRARIES=( $LIBRARIES $arg )
            breaksw

        case "-s"
            set OPTS_LD=( $OPTS_LD $arg )
            breaksw

        case "-*"
            echo "passing unrecognized option $arg to all compilers and linkers"
            set OPTS_CC=( $OPTS_CC $arg )
            set OPTS_CPLUS=( $OPTS_CPLUS $arg )
            set OPTS_LD=( $OPTS_LD $arg )
	    set OPTS_CPP=( $OPTS_CPP $arg )
            breaksw

        case "*.*"
            set FILES=( $FILES "$arg" )
            breaksw
        
        default:
            echo "Unrecognized argument $arg"
            goto failure

    endsw
end

##############################################################################
#
# The following section identifies CHARMBIN, the charm binary-directory.
#
##############################################################################

set ORIGDIR=`pwd`

# Try to find CHARMBIN by looking in directory where charmc is

if ($?CHARMBIN == 0) then
    set SCRIPT=$0
    if ($SCRIPT:h != $SCRIPT:t) then
        cd $SCRIPT:h
        set SCRIPT=$SCRIPT:t
    else
        foreach dir ($path)
            if (-x $dir/$SCRIPT && ! -d $dir/$SCRIPT) then
                cd $dir
                break
            endif
        end
    endif
    while (x`find $SCRIPT -type l -print` == x$SCRIPT)
        set SCRIPT=`ls -al ./$SCRIPT:t | sed -e "s@.*-> @@"`
        if ($SCRIPT:h != $SCRIPT:t) then
            cd $SCRIPT:h
            set SCRIPT=$SCRIPT:t
        endif
    end
    set CHARMBIN=`pwd`
endif

# Give an error message

if ($?CHARMBIN == 0) then
    echo ''
    echo 'Error - cannot find the charm binary directory.'
    echo ''
    echo 'Normally, charmc and the other charm scripts automatically'
    echo 'locate the charm binary directory, using the following strategy:'
    echo ''
    echo '  Step 1. It looks in the directory specified in $CHARMBIN'
    echo ''
    echo '  Step 2. It looks in the directory from which charmc was run.'
    echo ''
    echo 'If it searches both these places, and doesnt find the charm'
    echo 'files, it will give up.'
    echo ''
    goto failure
    endif
endif

if ($?MACHTYPE) then
    if (-d $CHARMBIN/../../$MACHTYPE/bin) then
        cd $CHARMBIN/../../$MACHTYPE/bin
	set CHARMBIN=`pwd`
    else
        echo 'error - there is no installed charm for "'$MACHTYPE'"'
        goto failure
    endif
endif

if ($?CHARMLIB == 0) then
    cd $CHARMBIN/../lib
    set CHARMLIB=`pwd`
endif
if ($?CHARMINC == 0) then
    cd $CHARMBIN/../include
    set CHARMINC=`pwd`
endif

##############################################################################
#
# Load machine-specific configuration data, then handle overrides to it.
#
##############################################################################

source $CHARMINC/conv-mach.csh

if ($?SEQUENTIAL) then
    set CMK_CC=( $CMK_SEQ_CC )
    set CMK_LD=( $CMK_SEQ_LD )
endif

if ($?OVERRIDE_CC) then
    set CMK_CC[1]=""
    set CMK_CC = ( $OVERRIDE_CC $CMK_CC )
endif

if ($?OVERRIDE_CPLUS) then
    set CMK_CXX[1]=""
    set CMK_CXX = ( $OVERRIDE_CPLUS $CMK_CXX )
endif

if ($?OVERRIDE_LD) then
    set CMK_LD[1]=""
    set CMK_LD = ( $OVERRIDE_LD $CMK_LD )
endif

if ($?OVERRIDE_LD) then
    set CMK_LDXX[1]=""
    set CMK_LDXX = ( $OVERRIDE_LD $CMK_LDXX )
endif

##############################################################################
#
# Check for valid choice of LANGUAGE
#
##############################################################################

if ($?LANGUAGE == 0) set LANGUAGE=charm

switch ($LANGUAGE)
    case "charm"
    case "charm++"
    case "converse"
        breaksw
    default:
        echo "charmc: Unrecognized choice of language $LANGUAGE"
endsw

##############################################################################
#
# Compile all specified files
#
# All temporary files named *.TMP.* for easy cleanup.
#
##############################################################################

cd $ORIGDIR

foreach FILE ($FILES)
  set BASE=$FILE:r
  set TMP=$BASE:t.TMP
  if (${BASE}.o != $FILE) then
      if ($?VERBOSE) echo "compiling $FILE."
      /bin/rm -f $BASE.o $BASE.f.o
  endif
  switch ($FILE)
    case "*.p"
      if ($?VERBOSE) echo "$CMK_CPP $OPTS_CPP -I$CHARMINC $BASE.p > $TMP.cpp"
      $CMK_CPP $OPTS_CPP -I$CHARMINC $BASE.p > $TMP.cpp
      if ($?VERBOSE) echo "$CHARMBIN/charmfilter < $TMP.cpp | $CMK_M4 > $TMP.space"
      $CHARMBIN/charmfilter < $TMP.cpp | $CMK_M4 > $TMP.space
      if ($?VERBOSE) echo "$CHARMBIN/charmxlat $TMP.space $TMP.c"
      $CHARMBIN/charmxlat $TMP.space $TMP.c
      if ($status) goto failure
      if ($?VERBOSE) echo "$CMK_CC $OPTS_CC -I$CHARMINC -c $TMP.c"
      $CMK_CC $OPTS_CC -I$CHARMINC -c $TMP.c
      if ($status) goto failure
      if ($?OBJECT == 0) then
          if ($?VERBOSE) echo "/bin/mv $TMP.o $BASE.o"
          /bin/mv $TMP.o $BASE.o
      else
          set OBJECTFILES=( $OBJECTFILES $TMP.o )
      endif
      breaksw
    case "*.P"
      echo 'extern "C" {' > $TMP.P.c
      echo '#include <stdio.h>' >> $TMP.P.c
      echo '}' >> $TMP.P.c
      echo '#line 1 "'$BASE.P'"' >> $TMP.P.c
      /bin/cat $BASE.P >> $TMP.P.c
      if ($?VERBOSE) echo "$CMK_CXX -E $OPTS_CPP -I$CHARMINC $TMP.P.c > $TMP.cpp"
      $CMK_CXX -E $OPTS_CPP -I$CHARMINC $TMP.P.c > $TMP.cpp
      if ($?VERBOSE) echo "$CHARMBIN/charmfilter++ $TMP.cpp | $CMK_M4 > $TMP.space"
      $CHARMBIN/charmfilter++ $TMP.cpp | $CMK_M4 > $TMP.space
      if ($?VERBOSE) echo "$CHARMBIN/charmxlat++ $TMP.space $TMP.C"
      $CHARMBIN/charmxlat++ $TMP.space $TMP.C
      if ($status) goto failure
      if ($?VERBOSE) echo "$CMK_CXX $OPTS_CPLUS -I$CHARMINC -c $TMP.C"
      $CMK_CXX $OPTS_CPLUS -I$CHARMINC -c $TMP.C
      if ($status) goto failure
      if ($?OBJECT == 0) then
        if ($?VERBOSE) echo "/bin/mv $TMP.o $BASE.o"
        /bin/mv $TMP.o $BASE.o
      else
        set OBJECTFILES=( $OBJECTFILES $TMP.o )
      endif
      breaksw
    case "*.c"
      if ($?VERBOSE) echo "$CMK_CC $OPTS_CC -I$CHARMINC -c $BASE.c"
      $CMK_CC $OPTS_CC -I$CHARMINC -c $BASE.c
      if ($status) goto failure
      if ($?OBJECT) then
	if ($OBJECT != $BASE.o) set DELETE=( $DELETE $BASE.o )
        set OBJECTFILES=( $OBJECTFILES $BASE.o )
      endif
      breaksw
    case "*.C"
      if ($?VERBOSE) echo "$CMK_CXX $OPTS_CPLUS -I$CHARMINC -c $BASE.C"
      $CMK_CXX $OPTS_CPLUS -I$CHARMINC -c $BASE.C
      if ($status) goto failure
      if ($?OBJECT) then
	if ($OBJECT != $BASE.o) set DELETE=( $DELETE $BASE.o )
        set OBJECTFILES=( $OBJECTFILES $BASE.o )
      endif
      breaksw
    case "*.cxx"
      if ($?VERBOSE) echo "$CMK_CXX $OPTS_CPLUS -I$CHARMINC -c $BASE.cxx"
      $CMK_CXX $OPTS_CPLUS -I$CHARMINC -c $BASE.cxx
      if ($status) goto failure
      if ($?OBJECT) then
	if ($OBJECT != $BASE.o) set DELETE=( $DELETE $BASE.o )
        set OBJECTFILES=( $OBJECTFILES $BASE.o )
      endif
      breaksw
    case "*.f"
    case "*.F"
    case "*.fc"
    case "*.FC"
      echo "charmc: I'm not yet smart enough to compile $FILE"
      goto failure
    case "*.o"
      set OBJECTFILES=( $OBJECTFILES $BASE.o )
      breaksw
    default:
      echo "file with unrecognized extension $FILE"
      goto failure
  endsw
end

##############################################################################
#
# Link-Step: there are three kinds of link-phases.
#
# 1. If $OBJECT is a ".a" file, a library is created from $OBJECTFILES.
# 2. If $OBJECT is a ".o" file, then an "LDRO" is created from $OBJECTFILES.
# 3. If $OBJECT is otherwise, then an executable is created.
#
##############################################################################

if ($?OBJECT == 0) goto success

switch ($OBJECT)
  case "*.o":
    rm -f $OBJECT
    if (($#FILES == 1)&&($#OBJECTFILES == 1)) then
        if ($OBJECT != $OBJECTFILES) then
            if ($?VERBOSE) echo mv $OBJECTFILES $OBJECT
            mv $OBJECTFILES $OBJECT
            if ($status) goto failure
        endif
    else
        if ( $?VERBOSE ) echo $CMK_LDRO $OBJECT $OBJECTFILES
        $CMK_LDRO $OBJECT $OBJECTFILES
        if ($status) goto failure
    endif
    goto copyobj

  case "*.a":
    if ( $?VERBOSE ) echo rm -f $OBJECT
    rm -f $OBJECT
    if ( $?VERBOSE ) echo $CMK_AR $OBJECT $OBJECTFILES
    $CMK_AR $OBJECT $OBJECTFILES
    if ($status) goto failure
    if ( $?VERBOSE ) echo $CMK_RANLIB $OBJECT
    $CMK_RANLIB $OBJECT
    if ($status) goto failure
    goto copyobj

  default:
    goto exelink

endsw

##############################################################################
#
# Executable-Linking section.
#
# Check for valid choice of EXECMODE
# Check for valid choice of QUEUE
# Check for valid choice of BALANCE
# Check for compatibility among BALANCE, QUEUE, and EXECMODE
# Create MODULES.TMP.o
# Do the linkage.
#
##############################################################################

exelink:

if ($?SEQUENTIAL) then
    if ($?VERBOSE) $CMK_SEQ_LD $OPTS_LD -o $OBJECT $OBJECTFILES -L$CHARMLIB $LIBRARIES
    $CMK_SEQ_LD $OPTS_LD -o $OBJECT $OBJECTFILES -L$CHARMLIB $LIBRARIES
    if ($status) goto failure
    goto copyobj
endif

# Check for valid choice of EXECMODE

if ($?EXECMODE == 0) set EXECMODE=notrace

if (-e $CHARMLIB/libckn-core-$EXECMODE.o) then
   set LIBCLASS=ckn
else
   if (-e $CHARMLIB/libckd-core-$EXECMODE.o) then
      set LIBCLASS=ckd
   else
      echo "charmc : No such execmode $EXECMODE"
      (cd $CHARMLIB ; ls -al libck?-core-*)
      goto failure
   endif
endif

# Check for valid choice of QUEUE

if ($?QUEUE == 0) set QUEUE=fifo

if (! -e $CHARMLIB/libconv-qs-$QUEUE.o) then
   echo "charmc: Unknown queueing strategy $QUEUE"
   (cd $CHARMLIB ; ls -al libconv-qs-*)
   goto failure
endif

# Check for valid choice of BALANCE

if ($?BALANCE == 0) set BALANCE=rand

if (! -e $CHARMLIB/lib${LIBCLASS}-ldb-$BALANCE.o) then
   echo "charmc : Unknown load balancer $BALANCE"
   (cd $CHARMLIB ; ls -al lib${LIBCLASS}-ldb-*)
   goto failure
endif

# Check that EXECMODE is compatible with QUEUE and BALANCE

if ($EXECMODE == replay) then
    if ($?QUEUE == 0) set QUEUE=replay
    if ($?BALANCE == 0) set BALANCE=replay
    if ($QUEUE != replay) then
        echo "Ignoring -queue $QUEUE, incompatible with -execmode replay"
    endif
    if ($BALANCE != replay) then
        echo "Ignoring -balance $BALANCE, incompatible with -execmode replay"
    endif
    set QUEUE=replay
    set BALANCE=replay
endif

# Check that BALANCE is compatible with QUEUE

if ( $BALANCE == btok ) then
    if ( ($QUEUE != bfifo) && ($QUEUE != bstack) ) then
        echo "WARNING : btok strategy needs bfifo or bstack queueing strategy"
    endif
endif

# Identify the libraries to use

switch ($LANGUAGE)
    case "charm"
        set OBJECTFILES = ($OBJECTFILES \
        	$CHARMLIB/lib${LIBCLASS}-core-$EXECMODE.o \
        	$CHARMLIB/lib${LIBCLASS}-ldb-$BALANCE.o \
        	$CHARMLIB/lib${LIBCLASS}-cplus-n.o \
        	$CHARMLIB/libconv-core.o \
        	$CHARMLIB/libconv-qs-$QUEUE.o )
	set LOADER=($CMK_LD)
        breaksw
    case "charm++"
        if ($?MAINOBJ == 0) set MAINOBJ=$CHARMLIB/lib${LIBCLASS}-defmain.o
        set OBJECTFILES = ($OBJECTFILES \
        	$CHARMLIB/lib${LIBCLASS}-core-$EXECMODE.o \
        	$CHARMLIB/lib${LIBCLASS}-ldb-$BALANCE.o \
        	$CHARMLIB/lib${LIBCLASS}-cplus-y.o \
        	$CHARMLIB/libconv-core.o \
        	$CHARMLIB/libconv-qs-$QUEUE.o )
	set LOADER=($CMK_LDXX)
        breaksw
    case "converse"
        set OBJECTFILES = ($OBJECTFILES \
        	$CHARMLIB/libconv-core.o \
        	$CHARMLIB/libconv-qs-$QUEUE.o )
	set LOADER=($CMK_LD)
        breaksw
endsw

set LIBRARIES = ($LIBRARIES $CMK_LIBS -lm)

# Perform preliminary Linkage of user's object files and charm libraries.

echo "linking $OBJECT with -language $LANGUAGE"

set DELETE=(PRE.TMP.o $DELETE)
if ($?VERBOSE) echo "$CMK_LDRO PRE.TMP.o $OBJECTFILES -L$CHARMLIB $LIBRARIES"
$CMK_LDRO PRE.TMP.o $OBJECTFILES -L$CHARMLIB $LIBRARIES
if ($status) goto failure

if (-e $CHARMBIN/conv-host) then
    /bin/rm -f conv-host
    /bin/ln -s $CHARMBIN/conv-host conv-host
endif

# Create MODULES.TMP.o

if ($?VERBOSE) echo "Creating MODULES.TMP.c"
set DELETE=(MODULES.TMP.nm MODULES.TMP.dat MODULES.TMP.c MODULES.TMP.o $DELETE)
rm -f MODULES.TMP.nm MODULES.TMP.dat MODULES.TMP.c MODULES.TMP.o
$CMK_NM PRE.TMP.o > MODULES.TMP.nm
csh -fc "$CMK_NM_FILTER" < MODULES.TMP.nm | awk '(/^_CK_.*_init$/&&(\!/^_CK_.*_struct_init$/)) { print substr($1, 5, length($1)-9); }' | sort | uniq > MODULES.TMP.dat
echo 'Modules: '`cat MODULES.TMP.dat`
awk '{print "extern void _CK_"$1"_init();";}' < MODULES.TMP.dat >> MODULES.TMP.c
echo '_CK_module_init_fn()' >> MODULES.TMP.c
echo '{' >> MODULES.TMP.c
awk '{print "_CK_"$1"_init();";}' < MODULES.TMP.dat >> MODULES.TMP.c
echo '}' >> MODULES.TMP.c

if ($?VERBOSE) echo $CMK_CC $OPTS_CC -c MODULES.TMP.c
$CMK_CC $OPTS_CC -c MODULES.TMP.c
if ($status) goto failure
set OBJECTFILES = ($OBJECTFILES MODULES.TMP.o)

# Decide whether or not to add defmain.

if (! { (egrep '^charm_main$' MODULES.TMP.nm >& /dev/null) }) then
	set OBJECTFILES=($CHARMLIB/lib${LIBCLASS}-defmain.o $OBJECTFILES)
endif

# Perform final linkage

if ($?VERBOSE) echo $LOADER $OPTS_LD -o $OBJECT $OBJECTFILES -L$CHARMLIB $LIBRARIES
$LOADER $OPTS_LD -o $OBJECT $OBJECTFILES -L$CHARMLIB $LIBRARIES
if ($status) goto failure

########################################################################
#
# copyobj: if more than one -o specified, copy the resulting object file.
#
########################################################################

copyobj:

foreach x ($COPIES)
    if ($x != $OBJECT) then
	set COPY=$x
	if (-d $COPY) set COPY=$COPY/$OBJECT
        if ($?VERBOSE) echo rm -f $COPY ";" ln $OBJECT $COPY
        rm -f $COPY ; ln $OBJECT $COPY
    endif
end

goto success

########################################################################
#
# Clean up files and exit
#
########################################################################

success:

    set STATUS=0
    goto end

failure:

    echo 'charmc: aborting.'
    set STATUS=1
    goto end

end:

    if ($?SAVE == 0) then
        foreach FILE ($FILES)
            set BASE=$FILE:r
            set TMP=$BASE:t.TMP
            /bin/rm -f $TMP.P.c $TMP.C $TMP.cpp $TMP.space $TMP.o
            /bin/rm -f $TMP.c $TMP.c.0.h $TMP.c.1.h $TMP.c.2.h $BASE:t.headers
        end
        rm -f core $DELETE
    endif
    exit ($STATUS)
